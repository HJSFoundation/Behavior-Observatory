#!/usr/bin/env python
# -*- coding: utf-8 -*-
# generated by wxGlade 0.6.3 on Mon Apr  9 14:15:10 2012

import wx

# begin wxGlade: extracode
# end wxGlade

import csv
import time
from time import strftime
import os.path

a = [] 
ot = []
oft = []
OnTask = ['On Task' ]
OffTask = ['Off Task' ]
off=[]
on=[]
ontotal=[]
offtotal=[]
slf_rdr=["SELF"] 
peer_rdr=["PEER"]
tchr_rdr=["TEACHER"]
rdr_peer=["REDIRECTED"]
redirect_times=[]#stores the system time of each redirect
redirect_interval=[]#stores the intervals between each redirect event 
interval_labels=[] 
rpt1=[]
rpt2=[]
rpt3=[]
rpt1i=[]
rpt2i=[]
rpt3i=[]
rpt1n=[]
rpt2n=[]
rpt3n=[]

class Dialog1(wx.Dialog):
    def __init__(self, *args, **kwds):
        # begin wxGlade: Dialog1.__init__
        kwds["style"] = wx.DEFAULT_DIALOG_STYLE|wx.MAXIMIZE_BOX|wx.MINIMIZE_BOX|wx.STAY_ON_TOP
        wx.Dialog.__init__(self, *args, **kwds)
        
        self.first_name_txt = wx.TextCtrl(self, -1, "Enter Student First Name Here")
        self.last_name_txt = wx.TextCtrl(self, -1, "Enter Student Last Name Here")
        self.observer_first = wx.TextCtrl(self, -1, "Enter Your Name Here")
        self.static_line_1 = wx.StaticLine(self, -1)
        self.save_names = wx.Button(self, -1, "Fill Out Information Above, Then Press Here")
        self.static_line_2 = wx.StaticLine(self, -1)
        self.time_button = wx.Button(self, -1, "TIME")
        self.notes_box = wx.TextCtrl(self, -1, "\n", style=wx.TE_MULTILINE|wx.TE_LINEWRAP|wx.TE_WORDWRAP)
        self.save_quit = wx.Button(self, -1, "Save and Quit")
        self.re_title = wx.StaticText(self, -1, "Record Repetitive Events")
        self.re_txt_1 = wx.TextCtrl(self, -1, "Repetitive Behavior")
        self.count_1 = wx.Button(self, -1, "Record")
        self.re_txt_2 = wx.TextCtrl(self, -1, "Repetitive Behavior")
        self.count_2 = wx.Button(self, -1, "Record")
        self.re_txt_3 = wx.TextCtrl(self, -1, "Repetitive Behavior")
        self.count_3 = wx.Button(self, -1, "Record")
        self.static_line_rep = wx.StaticLine(self, -1)
        self.rd_title = wx.StaticText(self, -1, "Record Redirects")
        self.slf_rd_btn = wx.Button(self, -1, "Self Redirect")
        self.slf_rd_cnt = wx.StaticText(self, -1, "0")
        self.pr_rd_btn = wx.Button(self, -1, "Peer Redirect")
        self.pr_rd_cnt = wx.StaticText(self, -1, "0")
        self.tch_rd_btn = wx.Button(self, -1, "Teacher Redirect")
        self.tch_rd_cnt = wx.StaticText(self, -1, "0")
        self.rd_pr_btn = wx.Button(self, -1, "Redirected Peer")
        self.rd_pr_cnt = wx.StaticText(self, -1, "0")
        self.re_1_lbl = wx.StaticText(self, -1, "Repetive Event Count ")
        self.cnt_1 = wx.StaticText(self, -1, "0")
        self.re_2_lbl = wx.StaticText(self, -1, "Repetive Event Count")
        self.cnt_2 = wx.StaticText(self, -1, "0")
        self.re_3_lbl = wx.StaticText(self, -1, "Repetitive Event Count")
        self.cnt_3 = wx.StaticText(self, -1, "0")
        self.help = wx.Button(self, -1, "HELP!")
        self.about = wx.Button(self, -1, "About")
        
        #Bindings
        self.Bind(wx.EVT_BUTTON, self.time_event, self.time_button)
        self.Bind(wx.EVT_BUTTON, self.filefunc, self.save_quit)
        self.Bind(wx.EVT_BUTTON, self.header, self.save_names)
        self.Bind(wx.EVT_BUTTON, self.self_redirect, self.slf_rd_btn)
        self.Bind(wx.EVT_BUTTON, self.peer_redirect, self.pr_rd_btn)
        self.Bind(wx.EVT_BUTTON, self.teacher_redirect, self.tch_rd_btn)
        self.Bind(wx.EVT_BUTTON, self.redirect_peer, self.rd_pr_btn)
        self.Bind(wx.EVT_BUTTON, self.repeat_behavior_1, self.count_1)
        self.Bind(wx.EVT_BUTTON, self.repeat_behavior_2, self.count_2) 
        self.Bind(wx.EVT_BUTTON, self.repeat_behavior_3, self.count_3)
        
        self.time_button.Enable(False)
        
        self.__set_properties()
        self.__do_layout()
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: Dialog1.__set_properties
        self.SetTitle("Behavior Observatory")
        self.first_name_txt.SetMinSize((250, 28))
        self.last_name_txt.SetMinSize((250, 28))
        self.observer_first.SetMinSize((200, 28))
        self.time_button.SetMinSize((300, 30))
        self.notes_box.SetMinSize((300, 150))
        self.save_quit.SetMinSize((300, 30))
        self.re_txt_1.SetMinSize((160, 28))
        self.re_txt_2.SetMinSize((160, 28))
        self.re_txt_3.SetMinSize((160, 28))
        self.static_line_rep.SetMinSize((184, 3))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: Dialog1.__do_layout
        sizer_main = wx.BoxSizer(wx.HORIZONTAL)
        rpt_events_ct_sz = wx.BoxSizer(wx.VERTICAL)
        rpt_events_sz = wx.BoxSizer(wx.VERTICAL)
        rd_pr = wx.BoxSizer(wx.HORIZONTAL)
        tch_rd = wx.BoxSizer(wx.HORIZONTAL)
        pr_rd = wx.BoxSizer(wx.HORIZONTAL)
        slf_rd = wx.BoxSizer(wx.HORIZONTAL)
        sizer_left = wx.BoxSizer(wx.VERTICAL)
        name_saver_sz = wx.BoxSizer(wx.HORIZONTAL)
        observer_name_sz = wx.BoxSizer(wx.HORIZONTAL)
        last_name_sz = wx.BoxSizer(wx.HORIZONTAL)
        first_name_sz = wx.BoxSizer(wx.HORIZONTAL)
        first_name_sz.Add(self.first_name_txt, 0, 0, 0)
        sizer_left.Add(first_name_sz, 1, 0, 0)
        last_name_sz.Add(self.last_name_txt, 0, 0, 0)
        sizer_left.Add(last_name_sz, 1, 0, 0)
        observer_name_sz.Add(self.observer_first, 0, 0, 0)
        sizer_left.Add(observer_name_sz, 1, wx.EXPAND, 0)
        sizer_left.Add(self.static_line_1, 0, wx.EXPAND, 0)
        name_saver_sz.Add(self.save_names, 0, 0, 0)
        sizer_left.Add(name_saver_sz, 1, wx.EXPAND, 0)
        sizer_left.Add(self.static_line_2, 0, wx.EXPAND, 0)
        sizer_left.Add(self.time_button, 0, 0, 0)
        sizer_left.Add(self.notes_box, 0, 0, 0)
        sizer_left.Add(self.save_quit, 0, 0, 0)
        sizer_main.Add(sizer_left, 0, wx.ALL, 3)
        rpt_events_sz.Add(self.re_title, 0, 0, 0)
        rpt_events_sz.Add(self.re_txt_1, 0, 0, 0)
        rpt_events_sz.Add(self.count_1, 0, 0, 0)
        rpt_events_sz.Add(self.re_txt_2, 0, 0, 0)
        rpt_events_sz.Add(self.count_2, 0, 0, 0)
        rpt_events_sz.Add(self.re_txt_3, 0, 0, 0)
        rpt_events_sz.Add(self.count_3, 0, 0, 0)
        rpt_events_sz.Add(self.static_line_rep, 0, wx.ALL|wx.EXPAND, 0)
        rpt_events_sz.Add(self.rd_title, 0, 0, 0)
        slf_rd.Add(self.slf_rd_btn, 0, 0, 0)
        slf_rd.Add(self.slf_rd_cnt, 0, 0, 0)
        rpt_events_sz.Add(slf_rd, 1, wx.EXPAND, 0)
        pr_rd.Add(self.pr_rd_btn, 0, 0, 0)
        pr_rd.Add(self.pr_rd_cnt, 0, 0, 0)
        rpt_events_sz.Add(pr_rd, 1, wx.EXPAND, 0)
        tch_rd.Add(self.tch_rd_btn, 0, 0, 0)
        tch_rd.Add(self.tch_rd_cnt, 0, 0, 0)
        rpt_events_sz.Add(tch_rd, 1, wx.EXPAND, 0)
        rd_pr.Add(self.rd_pr_btn, 0, 0, 0)
        rd_pr.Add(self.rd_pr_cnt, 0, 0, 0)
        rpt_events_sz.Add(rd_pr, 1, wx.EXPAND, 0)
        sizer_main.Add(rpt_events_sz, 0, wx.ALL, 3)
        rpt_events_ct_sz.Add(self.re_1_lbl, 0, 0, 0)
        rpt_events_ct_sz.Add(self.cnt_1, 0, 0, 0)
        rpt_events_ct_sz.Add(self.re_2_lbl, 0, 0, 0)
        rpt_events_ct_sz.Add(self.cnt_2, 0, 0, 0)
        rpt_events_ct_sz.Add(self.re_3_lbl, 0, 0, 0)
        rpt_events_ct_sz.Add(self.cnt_3, 0, 0, 0)
        rpt_events_ct_sz.Add(self.help, 0, 0, 0)
        rpt_events_ct_sz.Add(self.about, 0, 0, 0)
        sizer_main.Add(rpt_events_ct_sz, 0, wx.ALL, 3)
        self.SetSizer(sizer_main)
        sizer_main.Fit(self)
        self.Layout()
        # end wxGlade
       
        
# end of class Dialog1

    def header(self, event, **dialogOptions):  
        dialog = wx.DirDialog(self, **dialogOptions)
        if dialog.ShowModal() == wx.ID_OK: 
            self.dirname = dialog.GetPath()
        dialog.Destroy()  
        directory = self.dirname    
        date_time = strftime("%Y-%m-%d %H:%M:%S")
        first = self.first_name_txt.GetValue()
        last = self.last_name_txt.GetValue() 
        text_file = open("%s/%s_%s.txt" % (directory, first, last), "w") 
        text_file.write("OBSERVATION REPORT FOR: %s %s   " % (first, last))
        text_file.write("%s" % (date_time))
        observer = self.observer_first.GetValue()
        text_file.write("\nObservation Performed By: %s" % observer)
        text_file.write('\n')
        text_file.write('----------------------------------------------------------------------------')
        text_file.write('\n')
        text_file.write('----------------------------------------------------------------------------')
        text_file.write('\n')
        text_file.write('\n')
        self.time_button.Enable(True)
        self.last_name_txt.Enable(False) 
        self.first_name_txt.Enable(False)
        self.save_names.Enable(False) 
        self.observer_first.Enable(False)    

    def time_event(self, event):
        a.append(1) 
        countfinal = len(a)
        if countfinal > 3: 
            del a[0:]
        #self.welcome.SetLabel("Indeterminate")
        #self.label_directions.SetLabel("Cick TIME to record on-task event")  
                 
        
        if countfinal == 1:
            on_start = time.time()
            ot.append(on_start) 
            #self.welcome.SetLabel("Timing On Task Event")
            first = self.first_name_txt.GetValue() 
            #self.label_directions.SetLabel("Timing On Task Event")
            self.SetBackgroundColour(wx.GREEN)
            self.Refresh()  
            on.append(1)
            #size = 18 
            #font = wx.Font(size, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL) 
            #self.label_directions.SetFont(font)  
            self.save_quit.Enable(False)                    
            
        if countfinal == 2: 
            on_stop = time.time() 
            on_taskraw = on_stop - ot.pop()
            on_task = round(on_taskraw, 2)
            ontotal.append(on_task) 
            OnTask.append(on_task)   
            self.SetBackgroundColour(wx.LIGHT_GREY)
            self.Refresh()
            #self.label_directions.SetLabel("Click TIME to record off-task event")             
            notes = self.notes_box.GetValue()
            first = self.first_name_txt.GetValue()
            last = self.last_name_txt.GetValue()
            directory = self.dirname 
            text_file = open("%s/%s_%s.txt" % (directory, first, last), "a")
            length = len(on)
            date_time = strftime("%H:%M:%S")
            text_file.write("\n") 
            text_file.write("ON TASK EVENT#%s, Interval Time: %s sec, Time of Day: %s" % (length, on_task, date_time))
            text_file.write('\n')
            text_file.write("==>%s" % (notes))
            text_file.write('\n')
            text_file.write("-----------------------------------------------------------") 
            text_file.write('\n')
            text_file.write("\nBEGIN OFF TASK RECORDING:\n")
            self.notes_box.Clear()
            self.save_quit.Enable(True)
            self.SetBackgroundColour(wx.LIGHT_GREY)
            
        if countfinal == 3: 
            start_off = time.time()
            oft.append(start_off) 
            self.SetBackgroundColour(wx.RED) 
            self.Refresh()
            #first = self.name_first.GetValue()
            #self.welcome.SetLabel("Timing Off Task Event")
            #self.label_directions.SetLabel("Timing off-task event.\n Record Notes Below") 
            off.append(1)
            self.save_quit.Enable(False) 
            
        if countfinal == 4: 
            stop_off = time.time()
            off_taskraw = stop_off - oft.pop()
            off_task = round(off_taskraw, 2)
            offtotal.append(off_task)  
            OffTask.append(off_task)
            self.SetBackgroundColour(wx.LIGHT_GREY)
            self.Refresh()
            notes2 = self.notes_box.GetValue()
            #self.welcome.SetLabel("Indeterminate")   
            first = self.first_name_txt.GetValue()
            last = self.last_name_txt.GetValue()
            directory = self.dirname
            text_file = open("%s/%s_%s.txt" % (directory, first, last), "a") 
            length = len(off)
            date_time = strftime("%H:%M:%S")
            text_file.write("\n") 
            text_file.write("OFF TASK EVENT#%s Interval Time: %s sec  Time of Day: %s" % (length, off_task, date_time))
            text_file.write('\n') 
            text_file.write("==>%s" % (notes2))
            text_file.write('\n')
            text_file.write('-----------------------------------------------------------')
            text_file.write('\n')
            text_file.write('\nBEGIN ON TASK RECORDING:\n')
            self.notes_box.Clear()
            self.save_quit.Enable(True) 

    def self_redirect(self, event): #Records the time a redirect happened in line with the on-task, off-task records and a tally summary appended to the bottom of the text file
        redirect_times.insert(0,0)
        m1 = time.time()
        m2 = redirect_times.pop()
        delta_raw = m1 - m2
        redirect_times.append(m1)
        delta = round(delta_raw, 2) 
        redirect_interval.append(delta)
        interval_labels.append("self") 
            
        self_tod = strftime("%H:%M:%S") #Record the time of day    
        slf_rdr.append(self_tod) #Put it in a list
        
        #Now, get all the variables needed to open and append the right text file
        first = self.first_name_txt.GetValue() 
        last = self.last_name_txt.GetValue() 
        directory = self.dirname
        #Open it
        text_file = open("%s/%s_%s.txt" % (directory, first, last), "a")
        #Add the human readable name of the event and the time of day to the text file 
        text_file.write("\nSELF REDIRECT: %s \n" % self_tod) 
        rd_cnt = len(slf_rdr) #Get a running length of the list
        cnt = rd_cnt - 1 
        self.slf_rd_cnt.SetLabel("%s" % cnt) #Advance the counter
        
    def peer_redirect(self, event): #Same thing as above
        redirect_times.insert(0,0)
        m1 = time.time()
        m2 = redirect_times.pop()
        delta_raw = m1 - m2
        redirect_times.append(m1)
        delta = round(delta_raw, 2)
        redirect_interval.append(delta)
        interval_labels.append("peer")
        
        peer_tod = strftime("%H:%M:%S")
        peer_rdr.append(peer_tod)
        first = self.first_name_txt.GetValue() 
        last = self.last_name_txt.GetValue() 
        directory = self.dirname
        text_file = open("%s/%s_%s.txt" % (directory, first, last), "a")
        text_file.write("\nPEER REDIRECT: %s\n" % peer_tod)
        peer_cnt = len(peer_rdr)
        peer = peer_cnt - 1
        self.pr_rd_cnt.SetLabel("%s" % peer) 
    
    def teacher_redirect(self, event):
        redirect_times.insert(0,0)
        m1 = time.time()
        m2 = redirect_times.pop()
        delta_raw = m1 - m2
        redirect_times.append(m1)
        delta = round(delta_raw, 2)
        redirect_interval.append(delta)
        interval_labels.append("teacher") 
        
        tch_tod = strftime("%H:%M:%S")
        tchr_rdr.append(tch_tod) 
        first = self.first_name_txt.GetValue() 
        last = self.last_name_txt.GetValue() 
        directory = self.dirname
        text_file = open("%s/%s_%s.txt" % (directory, first, last), "a")
        text_file.write("\nTEACHER REDIRECT: %s\n" % tch_tod)
        tch_cnt = len(tchr_rdr)
        tch = tch_cnt - 1 
        self.tch_rd_cnt.SetLabel("%s" % tch) 
        
    def redirect_peer(self, event): 
        pr_tod = strftime("%H:%M:%S")
        rdr_peer.append(pr_tod) 
        first = self.first_name_txt.GetValue() 
        last = self.last_name_txt.GetValue() 
        directory = self.dirname
        text_file = open("%s/%s_%s.txt" % (directory, first, last), "a")
        text_file.write("\nREDIRECTED PEER: %s\n" % pr_tod)
        pr_cnt = len(rdr_peer)
        pr = pr_cnt - 1
        self.rd_pr_cnt.SetLabel("%s" % pr) 
        
    def repeat_behavior_1(self, event):
        rpt1n.insert(0,0) 
        r1 = time.time()
        r2 = rpt1n.pop()
        delta_raw = r1 - r2
        rpt1n.append(r1) 
        delta = round(delta_raw, 2) 
        rpt1i.append(delta)
        repeat_tod = strftime("%H:%M:%S")
        repeat_value = self.re_txt_1.GetValue()
        if len(rpt1) == 0:
            rpt1.insert(0, repeat_value) 
        first = self.first_name_txt.GetValue() 
        last = self.last_name_txt.GetValue()
        directory = self.dirname
        text_file = open("%s/%s_%s.txt" % (directory, first, last), "a")
        text_file.write("\n%s: %s\n" % (repeat_value, repeat_tod)) 
        rpt1.append(repeat_tod)
        rep1 = len(rpt1) - 1 
        self.cnt_1.SetLabel("%s" % rep1) 
        self.re_1_lbl.SetLabel("%s" % repeat_value) 
        
    def repeat_behavior_2(self, event):
        rpt2n.insert(0,0)
        r1 = time.time()
        r2 = rpt2n.pop()
        delta_raw = r1 - r2
        rpt2n.append(r1) 
        delta = round(delta_raw, 2)
        rpt2i.append(delta)
        repeat_tod = strftime("%H:%M:%S")
        repeat_value = self.re_txt_2.GetValue()
        if len(rpt2) == 0:
            rpt2.insert(0, repeat_value)
        first = self.first_name_txt.GetValue() 
        last = self.last_name_txt.GetValue()
        directory = self.dirname
        text_file = open("%s/%s_%s.txt" % (directory, first, last), "a")
        text_file.write("\n%s: %s\n" % (repeat_value, repeat_tod)) 
        rpt2.append(repeat_tod)
        rep2 = len(rpt2) - 1 
        self.cnt_2.SetLabel("%s" % rep2) 
        self.re_2_lbl.SetLabel("%s" % repeat_value)
        
    def repeat_behavior_3(self, event): 
        rpt3n.insert(0,0)
        r1 = time.time()
        r2 = rpt3n.pop()
        delta_raw = r1 - r2
        rpt3n.append(r1) 
        delta = round(delta_raw, 2)
        rpt3i.append(delta)
        repeat_tod = strftime("%H:%M:%S")
        repeat_value = self.re_txt_3.GetValue()
        if len(rpt3) == 0:
            rpt3.insert(0, repeat_value)
        first = self.first_name_txt.GetValue() 
        last = self.last_name_txt.GetValue()
        directory = self.dirname
        text_file = open("%s/%s_%s.txt" % (directory, first, last), "a")
        text_file.write("\n%s: %s\n" % (repeat_value, repeat_tod)) 
        rpt3.append(repeat_tod)
        rep3 = len(rpt3) - 1 
        self.cnt_3.SetLabel("%s" % rep3) 
        self.re_3_lbl.SetLabel("%s" % repeat_value)
         
        
        
    def filefunc(self, event): #Writes the contents of the task lists to the .csv file and appends all the summary information to the text file.
        lenr = len(redirect_interval)
        len1 = len(rpt1i)
        len2 = len(rpt2i)
        len3 = len(rpt3i) 
        repeat_value1 = self.re_txt_1.GetValue()
        repeat_value2 = self.re_txt_2.GetValue()
        repeat_value3 = self.re_txt_3.GetValue()
        if lenr > 0:
            redirect_interval.pop(0)
            redirect_interval.insert(0, "Interval") 
        if len1 > 0:
            rpt1i.pop(0) 
            rpt1i.insert(0, "%s Int" % repeat_value1)
        if len2 > 0:
            rpt2i.pop(0)
            rpt2i.insert(0, "%s Int" % repeat_value2)
        if len3 > 0:
            rpt3i.pop(0)
            rpt3i.insert(0, "%s Int" % repeat_value3)
            
        firstname = self.first_name_txt.GetValue() 
        lastname = self.last_name_txt.GetValue() 
        directory = self.dirname
        
        writefile = csv.writer(open('%s/%s_%s.csv' % (directory, firstname, lastname), 'wb'), delimiter=',', quotechar='|', quoting=csv.QUOTE_MINIMAL)
        empty_row = ("") 
        writefile.writerow(OnTask)
        writefile.writerow(OffTask)
        writefile.writerow(empty_row)
        writefile.writerow(interval_labels)
        writefile.writerow(redirect_interval)
        writefile.writerow(empty_row)
        writefile.writerow(slf_rdr)
        writefile.writerow(tchr_rdr)
        writefile.writerow(peer_rdr)
        writefile.writerow(rdr_peer)
        writefile.writerow(empty_row)
        writefile.writerow(rpt1)
        writefile.writerow(rpt1i)
        writefile.writerow(rpt2)
        writefile.writerow(rpt2i) 
        writefile.writerow(rpt3)
        writefile.writerow(rpt3i)
        #self.welcome.SetLabel("Saved")
         
        total_off = sum(offtotal)
        total_on = sum(ontotal) 
        
        final_notes = self.notes_box.GetValue() 
        first = self.first_name_txt.GetValue()
        last = self.last_name_txt.GetValue()
        observer = self.observer_first.GetValue()
         
        total_self = len(slf_rdr) #Get the number of self redirects that happened
        total_peer = len(peer_rdr)
        total_teacher = len(tchr_rdr) 
        total_redirect_peer = len(rdr_peer)
        total_rpt1 = len(rpt1) 
        total_rpt2 = len(rpt2)
        total_rpt3 = len(rpt3) 
        
        if lenr > 1:
            redirect_interval.pop(0)
            average_interval = float(sum(redirect_interval) / len(redirect_interval))
            average = round(average_interval, 2)
            
        if len1 > 1: 
            rpt1i.pop(0) 
            avg = float(sum(rpt1i) / len(rpt1i))
            event1i = round(avg, 2)
        else: 
            event1i = 0
        if len2 > 1:
            rpt2i.pop(0)
            avg2 = float(sum(rpt2i) / len(rpt2i))
            event2i = round(avg2, 2)
        else:
            event2i = 0
        if len3 > 1:
            rpt3i.pop(0)
            avg3 = float(sum(rpt3i) / len(rpt3i))
            event3i = round(avg3, 2)
        else:
            event3i = 0
         
        directory = self.dirname
        text_file = open("%s/%s_%s.txt" % (directory, first, last), "a")
        text_file.write('\n')
        text_file.write('FINAL OBSERVATION NOTES:')
        text_file.write('\n')
        text_file.write('\n')
        text_file.write('%s' % (final_notes))
        text_file.write('\n')
        text_file.write('\n')
        if total_on != 0:
            text_file.write('Total time on task: %s' % (total_on))
            text_file.write('\n')
        if total_off != 0:
            text_file.write('Total time off task: %s' % (total_off))
            text_file.write('\n')
        if total_self != 0:    
            text_file.write("Total Self Redirects: %s\n" % total_self) #Add that number to the bottom of the file
        if total_peer !=0:
            text_file.write("Total Peer Redirects: %s\n" % total_peer)
        if total_teacher != 0:
            text_file.write("Total Teacher Redirects: %s\n" % total_teacher)
        if total_redirect_peer != 0:
            text_file.write("Redirected a Peer: %s times.\n" % total_redirect_peer)
        
        rpt1_1 = len(rpt1) 
        rpt1v = rpt1_1 - 1
        rpt2v = len(rpt2) - 1
        rpt3v = len(rpt3) - 1 
        if event1i != 0:
            text_file.write("Total Number of %s: %s\n" % (repeat_value1, rpt1v))  
            text_file.write("Average time between %s: %s\n" % (repeat_value1, event1i))
        if event2i != 0:
            text_file.write("Total Number of %s: %s\n" % (repeat_value2, rpt2v))  
            text_file.write("Average time between %s: %s\n" % (repeat_value2, event2i))
        if event3i != 0:
            text_file.write("Total Number of %s: %s\n" % (repeat_value3, rpt3v))  
            text_file.write("Average time between %s: %s\n" % (repeat_value3, event3i))
        
        if lenr > 1:
            text_file.write("Average Time Between Redirects: %s sec\n" % average)  
        date_time = strftime("\n%Y-%m-%d %H:%M:%S") 
        text_file.write("\nEND OF REPORT" '\n')
        text_file.write("%s" % (date_time))
        text_file.write("\n\n\n\nSIGNED:______________________________________\n") 
        text_file.write("         %s" % observer) 
        print interval_labels
        self.Close(True) 
        self.Destroy()
        
        
if __name__ == "__main__":
    behavior_observation = wx.PySimpleApp(0)
    wx.InitAllImageHandlers()
    dialog_3 = Dialog1(None, -1, "")
    behavior_observation.SetTopWindow(dialog_3)
    dialog_3.Show()
    behavior_observation.MainLoop()
